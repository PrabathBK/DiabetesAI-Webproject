# -*- coding: utf-8 -*-
"""diabetesAI webproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H3X_HgdiQUPrHCffL5SjhHiInWoeY-03
"""

!pip install streamlit # for inbuild web development
import streamlit

from PIL import Image #for dealing with image

import streamlit as st
from PIL import Image
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

data=pd.read_csv("/content/diabetes.csv")

#data['Outcome'].value_counts()

"""# Create Web application"""

st.header("Diabetes Detection App")

#import image
image=Image.open("/content/diabetes.jpg")
st.image(image) #show image in website

"""# Machine Learning part"""

x=data.iloc[:,:8].values
y=data.iloc[:,8].values

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)

model=RandomForestClassifier(n_estimators=500)
model.fit(x_train,y_train)
accuracy=accuracy_score(y_test,model.predict(x_test))
accuracy

"""## Hyper parameter Optimization"""

from sklearn.model_selection import GridSearchCV,KFold

param_grid = {'n_estimators': [50,100,500,700]}
kfold = KFold(n_splits=5, shuffle=True)
grid_search = GridSearchCV(model, param_grid, scoring='accuracy', cv=kfold)
grid_search.fit(x_train, y_train)
print(grid_search.best_params_)
print(grid_search.best_score_)

"""Used found paraneters"""

model=RandomForestClassifier(n_estimators=700)
model.fit(x_train,y_train)
accuracy=accuracy_score(y_test,model.predict(x_test))
accuracy

"""Logistic regression"""

model2=LogisticRegression()
model2.fit(x_train,y_train)
y_predict=model2.predict(x_test)
print(accuracy_score(y_test,y_predict))
print(confusion_matrix(y_test,y_predict))

"""I have tried many classification models. finaly I selected LogisticRegression and RandomForestClassifier. Among those 2, the best model is RandomForestClassifier"""

accuracy=accuracy_score(y_test,model2.predict(x_test))
st.write("Accuracy of the model is:", accuracy)

st.subheader("Accuracy of Trained model")
st.write(accuracy)
st.subheader("Please Enter Your Data")

#function for get user inputs
def user_inputs():
  preg=st.slider("Pregnancy",0,20,0)
  glu=st.slider("Glucose",0,200,0)
  bp=st.slider("Blood Pressure",0,130,0)
  sthick=st.slider("Skin thickness",0,100,0)
  ins=st.slider("Insulin",0.0,1000.0,0.0)
  bmi=st.slider("BMI",0.0,70.0,0.0)
  dpf=st.slider("DPF",0.000,3.000,0.000)
  age=st.slider("Age",0,100,0)
  input_dict={"Pregnancies":preg,"Glucose":glu,"Blood Pressure":bp,"skin Thickness":sthick,"Insulin":ins,"BMI":bmi,"DPF":dpf,"Age":age}
  return pd.DataFrame(input_dict,index=["User Input Values"])

ui=user_inputs()

#DIsplay Entered Data
st.subheader("Entered Data")
st.write(ui)

#Display Model Prediction
st.subheader("Predictions (0-non Diabetes , 1 - Diabetes)")
st.write(model.predict(ui))

